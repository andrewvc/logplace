input {
  tcp {
    port => 8001
    codec => line
  }
}

filter {
  dissect {
    mapping => {
      "message" => "%{command} %{args}"
    }
  }
  
  if [command] == 'write' {
    # Parse the data
    dissect {
      mapping => {
         "args" => "%{user} %{timestamp} %{x} %{y} %{color}"
      }
    }
    
    # Turn the timestamp from a string into a Time object
    # This will go in @timestamp
    date {
      match => ["timestamp", "UNIX"]
      target => "write_timestamp"
    }
    
    # Drop unneeded fields
    # Convert x / y coords to integers
    mutate {
      remove_field => ["headers", "timestamp", "host", "args"]
      convert => { 
        "x" => "integer" 
        "y" => "integer"
      }
    }
    
    ruby {
      init => "
        # Map of username to timestamps
        @mutex = Mutex.new
        @user_timestamps = {}
        @expiration = 5
        @last_clean = Time.now
        @clean_every = 10 # to seconds
      "
      code => "
        user = event.get('user')
        
        @mutex.synchronize do
          # Recalculate in case cleaning was slow
          expired = (Time.now - @expiration).to_i
        
          if (Time.now - @last_clean) > @clean_every
            hash_size = @user_timestamps.size
            @user_timestamps.each do |user,timestamp|
              @user_timestamps.delete(user) if timestamp <= expired
            end
            
            @logger.info('Cleaned ' + hash_size.to_s + '->' + @user_timestamps.size.to_s)
            
            @last_clean = Time.now
          end
          
          timestamp = @user_timestamps[user] 
          if timestamp.nil? || (timestamp && timestamp < expired)
            @user_timestamps[event.get('user')] = Time.now.to_i
            event.set('status', 'accepted')
          else
            event.set('status', 'over_rate_limit')
          end
        end
      "
    }
  }
  
  if [status] == 'accepted' or [command] == 'snapshot' or [command] == 'restore' {
    ruby {
      init => "
        @mutex = Mutex.new
        @buffer = [0].pack('C') * 1000*1000*3
        @snapshot_version = Time.now
      "
      
      code => "
        command = event.get('command')
        
        if command == 'snapshot'
          if event.get('snapshot_version')
            @logger.info('Received replicated snapshot!' + event.get('snapshot_version'))
          else
            @mutex.synchronize do
              @snapshot_version = Time.now.to_i
              event.set('snapshot_version', @snapshot_version)
              event.set('buffer', @buffer.clone)
              
              File.open('/tmp/rplace/snapshots/' + @snapshot_version.to_s + '.snapshot', 'w:BINARY') do |f|
                f.write(@buffer)
              end  
              
              @logger.info('Snapshot: ' + @snapshot_version.to_s)
            end
            
            
          end
        elsif command == 'restore'
          @mutex.synchronize do
            version = event.get('args').to_i
            path = '/tmp/rplace/snapshots/' + version.to_s + '.snapshot'
            @buffer = File.read(path, :encoding => 'BINARY')
            @snapshot_version = @version
            @snapshot_version = Time.at(version.to_i)
            @logger.info('Restored snapshot: ' + @snapshot_version.to_s)
          end
        elsif command == 'write'
          # Assumes 0 indexed positions and 3 bytes / channel
          position = event.get('x') * (event.get('y')+1) * 3
          color = event.get('color')
          r = color[0..1].to_i(16)
          g = color[2..3].to_i(16)
          b = color[4..5].to_i(16)
          color_bytes = [r,g,b].pack('CCC')
        
          @mutex.synchronize do
            @buffer[position..position+2] = color_bytes
            # This could be useful for recovery
            # You only need the latest snapshot + the changes tagged
            # with that snapshot version and later
            event.set('snapshot_version', @snapshot_version)
          end
        end
      "
    }
  }
}

output {
  if [command] == 'write' {
    if [status] == 'accepted' {
      file {
        path => "/tmp/rplace/writes/%{snapshot_version}.writes"
        codec => line { charset => "ASCII-8BIT" format => "%{message}"}
      }
    }
  }
}
